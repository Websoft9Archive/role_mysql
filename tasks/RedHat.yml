- name: Import MySQL Repo
  template:
    src: '{{item.src}}'
    dest: '{{item.dest}}'
  with_items:
    - {src: mysql-community.repo.jinja2,dest: /etc/yum.repos.d/mysql-community.repo}
    - {src: RPM-GPG-KEY-mysql,dest: /etc/pki/rpm-gpg/}
  when: ansible_distribution == "CentOS" 

- name: Import MySQL Repo
  template:
    src: '{{item.src}}'
    dest: '{{item.dest}}'
  with_items:
    - {src: mysql-community-aws.repo.jinja2,dest: /etc/yum.repos.d/mysql-community.repo}
    - {src: RPM-GPG-KEY-mysql,dest: /etc/pki/rpm-gpg/}
  when: ansible_distribution == 'Amazon'

- name: Import GPG Key
  shell: rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
  
- name: Install MySQL Client
  yum: 
    name: [mysql-community-client]

- block:
  - name: Install MySQL{{ mysql_version }}
    yum: 
      name: [mysql-community-server]
    
  - name: Copy MySQL{{mysql_version}} Configuration
    template: src=my.cnf.jinja2 dest=/etc/my.cnf

  - name: Restart MySQL{{mysql_version}}
    service:
      name: mysqld
      state: restarted
      enabled: yes

  - name: Clean MySQL Password
    shell: |
      systemctl stop mysqld
      mysqld --console --skip-grant-tables  --user=mysql &
      sleep 5
      {% if mysql_version <= "5.6" %}
      mysql -e "use mysql;update user set password=password('') where user='root';"
      {% endif %}
      {% if mysql_version == "5.7" %}
      mysql -e "use mysql;update user set authentication_string = password('') where user = 'root';"
      {% endif %}
      {% if mysql_version == "8.0" %}
      mysql -e "use mysql;update user set authentication_string = '' where user = 'root';"
      {% endif %}
      ps aux | grep "mysqld" |grep -v grep| cut -c 9-15 | xargs kill -9
      sleep 5
      systemctl restart mysqld

  - name: Disable  validate password plugin
    lineinfile:
      dest: /etc/my.cnf
      regexp: '#validate_password=OFF' 
      line: 'validate_password=OFF'
    when: mysql_version == '5.7'

  - name: Disable  validate password plugin
    lineinfile:
      dest: /etc/my.cnf
      regexp: "{{item.regexp}}"
      line: "{{item.line}}"
    with_items:
      - {regexp: "#validate_password.check_user_name=OFF" ,line: validate_password.check_user_name=OFF}
      - {regexp: "#validate_password.length=4" ,line: validate_password.length=4}
      - {regexp: "#validate_password.mixed_case_count=0" ,line: validate_password.mixed_case_count=0}
      - {regexp: "#validate_password.number_count=0" ,line: validate_password.number_count=0}
      - {regexp: "#validate_password.policy=0" ,line: validate_password.policy=0}
      - {regexp: "#validate_password.special_char_count=0" ,line: validate_password.special_char_count=0}
    when: mysql_version == '8.0'

  - name: Restart MySQL{{mysql_version}} Service
    service: name=mysqld state=restarted enabled=yes

  - name: Setting MySQL Password
    shell: mysqladmin -uroot --password='' password {{mysql_root_password}}

  - name: Removes all anyelse user accounts
    mysql_user:
      login_user: root
      login_password: "{{mysql_root_password}}"
      name: ''
      host_all: yes
      login_unix_socket: /var/lib/mysql/mysql.sock
      state: absent

  - name: Remove hostname user accounts
    mysql_user: 
      login_user: root 
      login_password: "{{mysql_root_password}}"
      name: 'root' 
      host: "{{ ansible_nodename }} "
      login_unix_socket: /var/lib/mysql/mysql.sock
      state: absent


  - name: Removes test Databases
    mysql_db:
      login_user: root
      login_password: "{{mysql_root_password}}"
      login_unix_socket: /var/lib/mysql/mysql.sock
      name: test
      state: absent

  - name: Removing privileges on test database
    command: mysql -uroot -p{{mysql_root_password}} -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'"

  - name: FLUSH PRIVILEGES
    command: mysql -uroot -p{{mysql_root_password}} -e "FLUSH PRIVILEGES"

  - name: Link MySQL service
    file:
      src: /usr/lib/systemd/system/mysqld.service
      dest: /usr/lib/systemd/system/mysql.service
      state: link

  - name: Create a MySQL  symbolic link
    file:
      src: '{{item.src}}'
      dest: '{{item.dest}}'
      state: link
    with_items:
      - {src: '/etc/my.cnf',dest: /data/config/my.cnf}  
      - {src: '/var/log/mysqld.log',dest: '/data/logs/mysqld.log'}
      - {src: '/var/lib/mysql',dest: /data/mysql} 

  when: mysql_install_server == "package"
